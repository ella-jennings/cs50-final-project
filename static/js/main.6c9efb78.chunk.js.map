{"version":3,"sources":["components/deal/deal.tsx","components/card/card.jsx","constants.js","components/resetButton/resetButton.jsx","components/city/city.jsx","components/helpers/calculator.ts","components/cities/cities.jsx","App.js","serviceWorker.js","index.js"],"names":["DealIcon","className","aria-label","focusable","data-prefix","data-icon","role","xmlns","viewBox","d","Card","props","selected","cardValue","value","toString","includes","name","colour","onClick","setAsSelected","CityEnum","InitialCards","2","3","4","5","6","7","8","9","10","CardOrder","InitialCities","ResetButton","resetFunction","aria-hidden","fill","City","updateCityTotal","useState","newTotal","setTotal","cards","setCards","useEffect","updateTotal","selectedCards","map","card","push","listOfValues","score","multiplier","bonus","length","forEach","parseInt","CalculateScore","genericProps","updatedCards","updateCards","Cities","fiveCities","cities","updateCities","overallTotal","calculateTotal","Object","keys","city","childProps","updatedCities","total","cityColour","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c9efb78.chunk.js","sourcesContent":["import React from 'react';\nimport './deal.css';\n\nconst DealIcon = ({className}:{className: string}) => {\n    return (\n        <svg aria-label=\"Deal card icon\" focusable=\"false\" data-prefix=\"far\" data-icon=\"handshake\" className={`dealCard dealCard${className}`} role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\">\n            <path d=\"M519.2 127.9l-47.6-47.6A56.252 56.252 0 0 0 432 64H205.2c-14.8 0-29.1 5.9-39.6 16.3L118 127.9H0v255.7h64c17.6 0 31.8-14.2 31.9-31.7h9.1l84.6 76.4c30.9 25.1 73.8 25.7 105.6 3.8 12.5 10.8 26 15.9 41.1 15.9 18.2 0 35.3-7.4 48.8-24 22.1 8.7 48.2 2.6 64-16.8l26.2-32.3c5.6-6.9 9.1-14.8 10.9-23h57.9c.1 17.5 14.4 31.7 31.9 31.7h64V127.9H519.2zM48 351.6c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16c0 8.9-7.2 16-16 16zm390-6.9l-26.1 32.2c-2.8 3.4-7.8 4-11.3 1.2l-23.9-19.4-30 36.5c-6 7.3-15 4.8-18 2.4l-36.8-31.5-15.6 19.2c-13.9 17.1-39.2 19.7-55.3 6.6l-97.3-88H96V175.8h41.9l61.7-61.6c2-.8 3.7-1.5 5.7-2.3H262l-38.7 35.5c-29.4 26.9-31.1 72.3-4.4 101.3 14.8 16.2 61.2 41.2 101.5 4.4l8.2-7.5 108.2 87.8c3.4 2.8 3.9 7.9 1.2 11.3zm106-40.8h-69.2c-2.3-2.8-4.9-5.4-7.7-7.7l-102.7-83.4 12.5-11.4c6.5-6 7-16.1 1-22.6L367 167.1c-6-6.5-16.1-6.9-22.6-1l-55.2 50.6c-9.5 8.7-25.7 9.4-34.6 0-9.3-9.9-8.5-25.1 1.2-33.9l65.6-60.1c7.4-6.8 17-10.5 27-10.5l83.7-.2c2.1 0 4.1.8 5.5 2.3l61.7 61.6H544v128zm48 47.7c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16c0 8.9-7.2 16-16 16z\"></path></svg>\n    )\n}\nexport default DealIcon;","import React from 'react';\nimport DealIcon from '../deal/deal';\nimport './card.scss'\n\nconst Card = (props) => {\n    let className = props.selected === true ? \"--selected\" : \"\";\n    const cardValue = props.value.toString().includes(\"Deal\") ? <DealIcon className={className}/> : props.value;\n\n    return(\n        <button name={props.value} className={`card card--${props.colour} card${className}`} onClick={() => props.setAsSelected(props.value)}>\n            <div className={\"card_value card_value--small\"}>\n                {cardValue}\n            </div>\n            <div className={\"card_value card_value--large\"}>\n                {cardValue}\n            </div>    \n        </button>\n    )\n}\n\nexport default Card;","export const CityEnum = {\n    YELLOW: \"yellow\",\n    RED: \"red\",\n    BLUE: \"blue\",\n    PURPLE: \"purple\",\n    GREEN: \"green\", \n    WHITE: \"white\"\n}\n\nexport const Deal = \"Deal\";\n\nexport const InitialCards = {\n  \"Deal1\": false,\n  \"Deal2\": false,\n  \"Deal3\": false,\n  2: false,\n  3: false,\n  4: false,\n  5: false,\n  6: false, \n  7: false,\n  8: false,\n  9: false,\n  10: false\n};\n\nexport const CardOrder = [\"Deal1\", \"Deal2\",\"Deal3\", 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  \nexport const InitialCities = {\n  [CityEnum.YELLOW]: 0,\n  [CityEnum.RED]: 0,\n  [CityEnum.BLUE]: 0,\n  [CityEnum.GREEN]: 0,\n  [CityEnum.WHITE]: 0,\n  [CityEnum.PURPLE]: 0\n}","import React from 'react';\nimport './resetButton.scss';\n\nconst ResetButton = ({resetFunction}) => {\n    \n    return (\n        <button className={\"reset\"} onClick={resetFunction}>\n            <div>\n                <svg \n                className={\"reset_svg\"}\n                aria-hidden=\"true\" \n                focusable=\"false\" \n                role=\"img\" \n                viewBox=\"0 0 500 500\"\n                >\n                    <path fill=\"black\" d=\"M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z\"></path>\n                </svg>\n            </div>\n        </button>    \n    )\n}\n\nexport default ResetButton;","import React, {useState, useEffect} from 'react';\nimport Card from '../card/card.jsx';\nimport {InitialCards, CardOrder} from '../../constants';\nimport {CalculateScore} from '../helpers/calculator.ts';\nimport './city.scss';\nimport ResetButton from '../resetButton/resetButton.jsx';\n\nconst City = ({colour, updateCityTotal}) => {\n    const [newTotal, setTotal] = useState(0);\n    const [cards, setCards] = useState(InitialCards);\n    \n    useEffect(() => {\n        updateTotal();\n    // adding colour/function like it suggests actually cause an infinite loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps \n    }, [cards])\n\n    const updateTotal = () => {\n        const selectedCards = [];\n        CardOrder.map(card => cards[card] && selectedCards.push(card))\n        const newTotal = CalculateScore(selectedCards);\n        setTotal(newTotal);\n        updateCityTotal(colour, newTotal);\n    }\n    \n    const updateCards = (value) => {\n        const updatedCards = {...cards};\n        updatedCards[value] = !updatedCards[value];\n        setCards(updatedCards);\n    }\n\n    const resetScore = () => {\n        setCards(InitialCards);\n        setTotal(0);\n      }\n\n    const genericProps = {\n        setAsSelected: (cardValue) => updateCards(cardValue),\n        colour: colour,\n    }\n\n    return (\n        <div className={`city_${colour} city`}>\n            <div className={\"cards\"}>\n            {\n                CardOrder.map(card => <Card {...genericProps} value={card} selected={cards[card]}/>)\n            }\n            </div>\n            <p className={`total total_${colour}`}>\n                {newTotal}\n                <ResetButton resetFunction={resetScore}/>\n            </p>\n        </div>\n    )\n}\n\nexport default City;","import {Deal} from '../../constants';\n\nexport const CalculateScore = (listOfValues: Array<string>):number => {\n    let score = 0;\n    let multiplier = 1;\n    let bonus = 0;\n    \n    const length = listOfValues.length;\n    if(length > 0) {\n        score -= 20;\n    }\n    if (length >= 8) {\n        bonus = 20;\n    }\n    listOfValues.forEach(value => {\n        if(!value.toString().includes(Deal)) {\n            score += parseInt(value);\n        }\n        else {\n            multiplier++;\n        }\n    });\n    return (score * multiplier) + bonus;\n}\n","import React, {useState, useEffect} from 'react';\nimport City from '../city/city.jsx'\nimport './cities.scss';\nimport {InitialCities, CityEnum} from '../../constants';\n\n\nconst Cities = (props) => {\n    if(props.fiveCities) {delete InitialCities[CityEnum.PURPLE]};\n    const [cities, updateCities] = useState(InitialCities);\n    const [overallTotal, updateTotal] = useState(0);\n\n    useEffect(() => {\n      calculateTotal();\n    });\n\n    const calculateTotal = () => {\n      let newTotal = 0;\n      Object.keys(cities).map(city => newTotal = newTotal + cities[city]);\n      updateTotal(newTotal);\n    }\n    \n    const updateCityTotal = (city, newTotal) => {\n        const updatedCities = {...cities};\n        updatedCities[city] = newTotal;\n        updateCities(updatedCities);\n    }\n   \n    const childProps = {\n      updateCityTotal: (city, newTotal) => updateCityTotal(city, newTotal),\n      updateTotal: (total) => updateTotal(total)\n    }\n\n    return(\n      <div>\n        <div className={\"cities\"}>\n          {Object.keys(cities).map(cityColour => <City colour={cityColour} {...childProps}/>)}\n        </div>\n        <div className=\"total_score\">\n          <span className=\"total_score total_score--value\">\n            Total Score: {overallTotal}\n          </span>\n        </div>\n      </div>\n    )\n}\n\nexport default Cities;","import React from 'react';\nimport './App.css';\nimport Cities from './components/cities/cities.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Lost Cities Calculator</h1>\n      </header>\n      <Cities/>\n      <p>svg obtained from <a href=\"https://fontawesome.com/license\">FontAwesome</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}