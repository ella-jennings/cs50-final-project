{"version":3,"sources":["components/settings/settings.tsx","constants.js","components/deal/deal.tsx","components/card/card.tsx","components/resetButton/resetButton.tsx","components/city/city.jsx","components/cities/cities.jsx","components/helpers/calculator.ts","components/settingsButton/settingsButton.tsx","App.js","serviceWorker.js","index.js"],"names":["Settings","fiveCities","changed","className","type","value","checked","onChange","CityEnum","CardOrder","DealIcon","aria-label","focusable","data-prefix","data-icon","role","xmlns","viewBox","d","Card","props","selected","cardValue","toString","includes","name","colour","onClick","setAsSelected","ResetButton","resetFunction","isWhite","aria-hidden","fill","City","cards","total","resetTotal","selectCard","childProps","map","card","key","Cities","InitialCities","2","3","4","5","6","7","8","9","10","GetInitialCities","useState","cities","updateCities","roundTotal","updateRoundTotal","useEffect","calculateOverallTotal","newTotal","Object","keys","city","selectedCards","push","listOfValues","score","multiplier","bonus","length","forEach","parseInt","CalculateScore","newCities","resetTotalForCity","cityColour","SettingsButton","openModal","App","isFiveCities","isModalOpen","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb00352c.chunk.js","sourcesContent":["import React from 'react';\nimport './settings.scss';\n\nconst Settings = ({fiveCities, changed}: baseProps) => {\n    return (\n        <div className=\"settingsPanel\">\n            <h2>Settings:</h2>\n            Five cities <input type=\"checkbox\" value=\"Five Cities\" checked={fiveCities} onChange={() => changed()}/>\n        </div>\n    )\n}\n\ntype baseProps = {\n    fiveCities: boolean,\n    changed: () => {}\n}\n\nexport default Settings;","export const CityEnum = {\n    YELLOW: \"yellow\",\n    RED: \"red\",\n    BLUE: \"blue\",\n    PURPLE: \"purple\",\n    GREEN: \"green\", \n    WHITE: \"white\"\n}\n\nexport const Deal = \"Deal\";\n\nexport const GetInitialCards = () => {\n return { \n    \"Deal1\": false,\n    \"Deal2\": false,\n    \"Deal3\": false,\n    2: false,\n    3: false,\n    4: false,\n    5: false,\n    6: false, \n    7: false,\n    8: false,\n    9: false,\n    10: false\n  } \n};\n\nexport const CardOrder = [\"Deal1\", \"Deal2\",\"Deal3\", 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  \nexport const GetInitialCities = () => {\n  return {\n    [CityEnum.YELLOW]: {cards: GetInitialCards(), total: 0},\n    [CityEnum.RED]: {cards: GetInitialCards(), total: 0 },\n    [CityEnum.BLUE]: {cards: GetInitialCards(), total: 0 },\n    [CityEnum.GREEN]: {cards: GetInitialCards(), total: 0 },\n    [CityEnum.WHITE]: {cards: GetInitialCards(), total: 0 },\n    [CityEnum.PURPLE]: {cards: GetInitialCards(), total: 0 }\n  }\n} \n\nexport const createUUID = () => {\n  var dt = new Date().getTime();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (dt + Math.random()*16)%16 | 0;\n      dt = Math.floor(dt/16);\n      // eslint-disable-next-line no-mixed-operators\n      return (c==='x' ? r :(r&0x3|0x8)).toString(16);\n  });\n  return uuid;\n}","import React from 'react';\nimport './deal.css';\n\nconst DealIcon = ({className}:{className: string}) => {\n    return (\n        <svg aria-label=\"Deal card icon\" focusable=\"false\" data-prefix=\"far\" data-icon=\"handshake\" className={`dealCard dealCard${className}`} role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\">\n            <path d=\"M519.2 127.9l-47.6-47.6A56.252 56.252 0 0 0 432 64H205.2c-14.8 0-29.1 5.9-39.6 16.3L118 127.9H0v255.7h64c17.6 0 31.8-14.2 31.9-31.7h9.1l84.6 76.4c30.9 25.1 73.8 25.7 105.6 3.8 12.5 10.8 26 15.9 41.1 15.9 18.2 0 35.3-7.4 48.8-24 22.1 8.7 48.2 2.6 64-16.8l26.2-32.3c5.6-6.9 9.1-14.8 10.9-23h57.9c.1 17.5 14.4 31.7 31.9 31.7h64V127.9H519.2zM48 351.6c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16c0 8.9-7.2 16-16 16zm390-6.9l-26.1 32.2c-2.8 3.4-7.8 4-11.3 1.2l-23.9-19.4-30 36.5c-6 7.3-15 4.8-18 2.4l-36.8-31.5-15.6 19.2c-13.9 17.1-39.2 19.7-55.3 6.6l-97.3-88H96V175.8h41.9l61.7-61.6c2-.8 3.7-1.5 5.7-2.3H262l-38.7 35.5c-29.4 26.9-31.1 72.3-4.4 101.3 14.8 16.2 61.2 41.2 101.5 4.4l8.2-7.5 108.2 87.8c3.4 2.8 3.9 7.9 1.2 11.3zm106-40.8h-69.2c-2.3-2.8-4.9-5.4-7.7-7.7l-102.7-83.4 12.5-11.4c6.5-6 7-16.1 1-22.6L367 167.1c-6-6.5-16.1-6.9-22.6-1l-55.2 50.6c-9.5 8.7-25.7 9.4-34.6 0-9.3-9.9-8.5-25.1 1.2-33.9l65.6-60.1c7.4-6.8 17-10.5 27-10.5l83.7-.2c2.1 0 4.1.8 5.5 2.3l61.7 61.6H544v128zm48 47.7c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16c0 8.9-7.2 16-16 16z\"></path></svg>\n    )\n}\nexport default DealIcon;","import React from 'react';\nimport DealIcon from '../deal/deal';\nimport './card.scss'\n\nconst Card = (props: baseProps) => {\n    let className = props.selected === true ? \"--selected\" : \"\";\n    const cardValue = props.value.toString().includes(\"Deal\") ? <DealIcon className={className}/> : props.value;\n\n    return(\n        <button name={props.value} className={`card card_${props.value} card--${props.colour} card${className}`} onClick={() => props.setAsSelected(props.value)}>\n            <div className={\"card_value card_value--small\"}>\n                {cardValue}\n            </div>\n            <div className={\"card_value card_value--large\"}>\n                {cardValue}\n            </div>    \n        </button>\n    )\n}\n\ntype baseProps = {\n    colour: string,\n    selected: boolean,\n    setAsSelected: (value: string) => {},\n    value: string\n}\nexport default Card;","import React from 'react';\nimport './resetButton.scss';\n\nconst ResetButton = ({resetFunction, isWhite = false}: {resetFunction: () => any, isWhite?: boolean}) => {\n    var colour = isWhite ? \"white\" : \"black\";\n    return (\n        <button className={\"reset\"} onClick={resetFunction}>\n            <div>\n                <svg \n                className={\"reset_svg\"}\n                aria-hidden=\"true\" \n                focusable=\"false\" \n                role=\"img\" \n                viewBox=\"5 -70 600 600\"\n                >\n                    <path fill={colour} d=\"M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z\"></path>\n                </svg>\n            </div>\n        </button>    \n    )\n}\n\nexport default ResetButton;","import React from 'react';\nimport Card from '../card/card';\nimport {CardOrder} from '../../constants';\nimport './city.scss';\nimport ResetButton from '../resetButton/resetButton';\n\nconst City = ({colour, cards, total, resetTotal, selectCard}) => {\n    const childProps = {\n        setAsSelected: (cardValue) => selectCard(cardValue, colour),\n        colour,\n    }\n    return (\n        <div className={`city_${colour} city`}>\n            <div className={\"cards\"}>\n            {\n                CardOrder.map(card => <Card key={`${colour}_${card}`}{...childProps} value={card} selected={cards[card]}/>)\n            }\n            </div>\n            <div className={`total total_${colour}`}>\n                <div className={\"total_value\"}>{total}</div>\n                <ResetButton resetFunction={() => resetTotal(colour)}/>\n            </div>\n        </div>\n    )\n}\n\nexport default City;","import React, {useState, useEffect} from 'react';\nimport {CalculateScore} from '../helpers/calculator.ts';\nimport City from '../city/city'\nimport './cities.scss';\nimport {GetInitialCities, CityEnum} from '../../constants';\nimport ResetButton from '../resetButton/resetButton';\n\n\nconst Cities = ({fiveCities}) => {\n  const InitialCities = GetInitialCities();\n  \n  if(fiveCities) {delete InitialCities[CityEnum.PURPLE]};\n    const [cities, updateCities] = useState(InitialCities);\n    const [roundTotal, updateRoundTotal] = useState(0);\n\n    useEffect(() => {\n      calculateOverallTotal();\n    })\n\n    const selectCard = (cardValue, colour) => {\n      const city = cities[colour];\n      city.cards[cardValue] = !city.cards[cardValue];\n      let selectedCards = [];\n      Object.keys(city.cards).map(card => city.cards[card] ? selectedCards.push(card) : null);\n      city.total = CalculateScore(selectedCards);\n      const newCities = {...cities};\n      newCities[colour] = city;\n      updateCities(newCities);\n    }\n\n    const calculateOverallTotal = () => {\n      let newTotal = 0;\n      Object.keys(cities).map(city => newTotal += cities[city].total);\n      updateRoundTotal(newTotal);\n    }\n\n    const resetTotalForCity = (colour) => {\n      let newCities = {...cities};\n      newCities[colour] = InitialCities[colour];\n      updateCities(newCities);\n    }\n\n    const resetOverallTotal = () => {\n      updateCities({...InitialCities});\n      updateRoundTotal(0);\n    }\n\n    const childProps = {\n      selectCard,\n      resetTotal: (colour) => resetTotalForCity(colour)\n    }\n\n    return(\n      <div>\n        <div className={\"cities\"}>\n          {Object.keys(cities).map(\n            cityColour =>\n            <City \n            key={`${cityColour}`}\n            colour={cityColour} \n            cards={cities[cityColour].cards} \n            total={cities[cityColour].total}\n            {...childProps}/>\n          )}\n        </div>\n        <div className=\"total_score\">\n          <div className=\" total_score total_score--value\">\n            Total Score: {roundTotal}\n            <ResetButton resetFunction={resetOverallTotal} isWhite={true}/>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Cities;","import {Deal} from '../../constants';\n\nexport const CalculateScore = (listOfValues: Array<string>):number => {\n    let score = 0;\n    let multiplier = 1;\n    let bonus = 0;\n    \n    const length = listOfValues.length;\n    if(length > 0) {\n        score -= 20;\n    }\n    if (length >= 8) {\n        bonus = 20;\n    }\n    listOfValues.forEach(value => {\n        if(!value.toString().includes(Deal)) {\n            score += parseInt(value);\n        }\n        else {\n            multiplier++;\n        }\n    });\n    return (score * multiplier) + bonus;\n}\n","import React from 'react';\nimport './settingsButton.scss';\n\nconst SettingsButton = ({openModal}:{openModal: ()=>{}}) => {\n    return (\n        <button className={\"settings\"} onClick={openModal}>\n            <svg \n            aria-hidden=\"true\" \n            focusable=\"false\" \n            role=\"img\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 512 512\">\n                <path fill=\"white\" d=\"M487.4 315.7l-42.6-24.6c4.3-23.2 4.3-47 0-70.2l42.6-24.6c4.9-2.8 7.1-8.6 5.5-14-11.1-35.6-30-67.8-54.7-94.6-3.8-4.1-10-5.1-14.8-2.3L380.8 110c-17.9-15.4-38.5-27.3-60.8-35.1V25.8c0-5.6-3.9-10.5-9.4-11.7-36.7-8.2-74.3-7.8-109.2 0-5.5 1.2-9.4 6.1-9.4 11.7V75c-22.2 7.9-42.8 19.8-60.8 35.1L88.7 85.5c-4.9-2.8-11-1.9-14.8 2.3-24.7 26.7-43.6 58.9-54.7 94.6-1.7 5.4.6 11.2 5.5 14L67.3 221c-4.3 23.2-4.3 47 0 70.2l-42.6 24.6c-4.9 2.8-7.1 8.6-5.5 14 11.1 35.6 30 67.8 54.7 94.6 3.8 4.1 10 5.1 14.8 2.3l42.6-24.6c17.9 15.4 38.5 27.3 60.8 35.1v49.2c0 5.6 3.9 10.5 9.4 11.7 36.7 8.2 74.3 7.8 109.2 0 5.5-1.2 9.4-6.1 9.4-11.7v-49.2c22.2-7.9 42.8-19.8 60.8-35.1l42.6 24.6c4.9 2.8 11 1.9 14.8-2.3 24.7-26.7 43.6-58.9 54.7-94.6 1.5-5.5-.7-11.3-5.6-14.1zM256 336c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z\"></path>\n            s</svg>\n        </button>    \n    )\n}\n\nexport default SettingsButton;","import React, {useState} from 'react';\nimport './App.scss';\nimport  Settings from './components/settings/settings';\nimport Cities from './components/cities/cities';\nimport SettingsButton from './components/settingsButton/settingsButton';\n\nfunction App() {\n  const [fiveCities, isFiveCities] = useState(false);\n  const [isModalOpen, openModal] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">Lost Cities Calculator</h1>\n        <div className=\"settingsContainer\">\n          <SettingsButton openModal={() => openModal(!isModalOpen)}/>\n        </div>\n      </header>\n      {isModalOpen ? <Settings fiveCities={fiveCities} changed={() => isFiveCities(!fiveCities)}/> : <Cities fiveCities={fiveCities}/>}\n      \n      <p>svg obtained from <a href=\"https://fontawesome.com/license\">FontAwesome</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}